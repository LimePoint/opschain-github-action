name: opschain change
description: run an opschain change
inputs:
  opschain_apiBaseUrl:
    description: OpsChain API Base URL
    required: true
  opschain_username:
    description: OpsChain username
    required: true
  opschain_password:
    description: OpsChain password
    required: true
  opschain_project:
    description: Project code for the change
    default: UNKNOWN
    required: true
  # opschain_project_properties:
  #   description: Project code for the change
  #   default: ${GITHUB_REF#refs/heads/}
  #   required: false
  opschain_environment:
    description: Environment code for the change
    required: true
  opschain_action:
    description: The action to perform during this change
    required: true
  opschain_requestTimeout:
    description: opschain request timeout
    default: '60000'
    required: false
  opschain_action_metadata:
    description: The action to perform during this change
    default: ''
    required: true
  opschain_git_remote:
    description: Git Remote name
    default: 'origin'
    required: true
  opschain_git_rev:
    description: The Git revision (branch/tag/commit) for the change
    default: ${GITHUB_SHA}
    required: true
runs:
  using: composite
  steps:
    - name: OpsChain-Bootstrap-Project-and-Environments
      shell: bash
      env:
        opschain_apiBaseUrl: ${{ inputs.opschain_apiBaseUrl }}
        opschain_username: ${{ inputs.opschain_username }}
        opschain_password: ${{ inputs.opschain_password }}
        opschain_requestTimeout: ${{ inputs.opschain_requestTimeout }}
      run: |-
        echo "inputs.opschain_project: ${inputs.opschain_project}"
        echo "inputs.opschain_environment: ${inputs.opschain_environment}"

        PROJECT_CODE=$(echo ${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/} | sed 's/-//g' | sed 's/_//g' | sed 's/ //g' | tr '[:upper:]' '[:lower:]')
        echo "PROJECT_CODE: "${PROJECT_CODE}

        PROJECT_EXISTS=$(curl -sL ${{ inputs.opschain_apiBaseUrl }}/projects --user ${{ inputs.opschain_username }}:${{ inputs.opschain_password }} | jq --arg project_code "${PROJECT_CODE}" -r '.data[]| select(.attributes.code==$project_code)' | wc -l)
        echo "PROJECT_EXISTS: ${PROJECT_EXISTS}"

        # Setup OpsChain Project
        #opschain project create --name "" --code ${{inputs.opschain_project}} --description "" --confirm
        # Setup OpsChain Project Git Remote 
        # Setup OpsChain Project Properties
        # Setup OpsChain Environment
        # Setup OpsChain Environment Properties
    # - name: OpsChain-Change-Create
    #   shell: bash
    #   env:
    #     opschain_apiBaseUrl: ${{ inputs.opschain_apiBaseUrl }}
    #     opschain_username: ${{ inputs.opschain_username }}
    #     opschain_password: ${{ inputs.opschain_password }}
    #     opschain_requestTimeout: ${{ inputs.opschain_requestTimeout }}
    #   run: |-
    #     echo "{ \"github_workflow\": \"${GITHUB_WORKFLOW}\", \"github_sha\": \"${GITHUB_SHA}\", \"github_repository\": \"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}\", \"github_actor\":\"${GITHUB_ACTOR}\", \"github_run_id\":\"${GITHUB_RUN_ID}\", \"workflow_run_url\":\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\", ${{inputs.opschain_action_metadata}} }" > metadata.json
    #     cat ./metadata.json
    #     #opschain change create --project-code ${{inputs.opschain_project}} --environment-code ${{inputs.opschain_environment}} --git-remote-name ${{inputs.opschain_git_remote}} --git-rev ${{inputs.opschain_git_rev}} --action ${{inputs.opschain_action}} --metadata-path ./metadata.json --confirm -f 
    #     exit $?
