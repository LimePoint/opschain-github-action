name: opschain change
description: run an opschain change
author: 'LimePoint Pty Ltd'
branding:
  icon: 'share-2'
  color: 'green'
inputs:
  opschain_apiBaseUrl:
    description: OpsChain API Base URL
    required: true
  opschain_username:
    description: OpsChain username
    required: true
  opschain_password:
    description: OpsChain password
    required: true
  opschain_project:
    description: Project code for the change
    default: ""
    required: true
  opschain_environment:
    description: Environment code for the change
    required: true
  opschain_action:
    description: The action to perform during this change
    required: true
  opschain_requestTimeout:
    description: opschain request timeout
    default: '60000'
    required: false
  opschain_action_metadata:
    description: The metadata to store along with this change
    default: ''
    required: true
  opschain_git_remote:
    description: Git Remote name to use on the OpsChain Project
    default: 'origin'
    required: true
  opschain_git_rev:
    description: The Git revision (branch/tag/commit) for the change
    default: ${GITHUB_SHA}
    required: true
  opschain_github_username:
    description: The GitHub Username with which to authenticate
    required: true
  opschain_github_pat:
    description: The GitHub Privileged Access Token with which to authenticate
    required: true
runs:
  using: composite
  steps:
    - name: OpsChain-Bootstrap-Project-and-Environments
      id: bootstrap
      shell: bash
      env:
        opschain_apiBaseUrl: ${{ inputs.opschain_apiBaseUrl }}
        opschain_username: ${{ inputs.opschain_username }}
        opschain_password: ${{ inputs.opschain_password }}
        opschain_requestTimeout: ${{ inputs.opschain_requestTimeout }}
      run: |-
        PROJECT_NAME=${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}
        PROJECT_CODE_NO_HYPHEN=${PROJECT_NAME//-/}
        PROJECT_CODE_DOWNCASE=$(echo ${PROJECT_CODE_NO_HYPHEN} | tr '[:upper:]' '[:lower:]')
        PROJECT_CODE=${PROJECT_CODE_DOWNCASE}
        if [ ! -z "${{ inputs.opschain_project }}" ]; then
          echo "INFO: ... OpsChain Project Code specified with inputs"
          PROJECT_CODE=${{ inputs.opschain_project }}
        fi
        echo "INFO: OpsChain Project Code: "${PROJECT_CODE}
        echo ::set-output name=project_code::${PROJECT_CODE}

        echo "INFO: Git Ref: "${GITHUB_REF#refs/heads/}
        echo "INFO: Git Repository: "${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}
        echo "INFO: Git Repository Owner: "${GITHUB_REPOSITORY_OWNER}
        echo "INFO: Git URL: "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}

        PROJECT_EXISTS=$(curl -sL ${{ inputs.opschain_apiBaseUrl }}/api/projects --user ${{ inputs.opschain_username }}:${{ inputs.opschain_password }} | jq --arg project_code "${PROJECT_CODE}" -r '.data[]| select(.attributes.code==$project_code)' | wc -l)
        if [ ${PROJECT_EXISTS} -eq 0 ]; then
          echo "INFO: ... creating OpsChain Project [ ${PROJECT_NAME} ] with Code [ ${PROJECT_CODE} ]"
          # Setup OpsChain Project
          opschain project create --name "${PROJECT_NAME}" \
                                  --code "${PROJECT_CODE}" \
                                  --description "OpsChain Project: ${PROJECT_NAME}" \
                                  --confirm
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to add OpsChain Project [ ${PROJECT_CODE} ]. Aborting."
            exit 1
          fi
        else
          echo "INFO: ... OpsChain Project with Code [ ${PROJECT_CODE} ] already exists. No action."
        fi

        # Setup OpsChain Project Git Remote
        GIT_REMOTE_EXISTS=$(curl -sL ${{ inputs.opschain_apiBaseUrl }}/api/projects/${PROJECT_CODE}/git_remotes --user ${{ inputs.opschain_username }}:${{ inputs.opschain_password }} | jq --arg git_remote ${{ inputs.opschain_git_remote }} -r '.data|select(length > 0)|map(select(.attributes.name==$git_remote))' | wc -l)
        if [ ${GIT_REMOTE_EXISTS} -eq 0 ]; then
          echo "INFO: ... adding Git Remote [ ${{ inputs.opschain_git_remote }} ] to Project [ ${PROJECT_CODE} ]"
          opschain project add-git-remote --project-code ${PROJECT_CODE} \
                                          --name ${{ inputs.opschain_git_remote }} \
                                          --url ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git \
                                          -U "${{ inputs.opschain_github_username }}" \
                                          -P "${{ inputs.opschain_github_pat }}" \
                                          --ssh-key-file "" \
                                          --confirm
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to add git remote to OpsChain Project [ ${PROJECT_CODE} ]. Aborting."
            exit 1
          fi
        else
          echo "INFO: ... OpsChain Project Git Remote [ ${{ inputs.opschain_git_remote }} ] already exists. No action."
        fi

        # Setup OpsChain Environment
        PROJECT_ID=$(curl -sL ${{ inputs.opschain_apiBaseUrl }}/api/projects/${PROJECT_CODE} --user ${{ inputs.opschain_username }}:${{ inputs.opschain_password }} | jq -r '.data.id')
        echo "INFO: OpsChain Project ID: "${PROJECT_ID}

        ENVIRONMENT_CODE=${{ inputs.opschain_environment }}
        ENVIRONMENT_CODE_NO_HYPHEN=${ENVIRONMENT_CODE//-/}
        ENVIRONMENT_CODE_DOWNCASE=$(echo ${ENVIRONMENT_CODE_NO_HYPHEN} | tr '[:upper:]' '[:lower:]')
        ENV_CODE=${ENVIRONMENT_CODE_DOWNCASE}

        ENVIRONMENT_EXISTS=$(curl -sL ${{ inputs.opschain_apiBaseUrl }}/api/projects/${PROJECT_CODE}/environments --user ${{ inputs.opschain_username }}:${{ inputs.opschain_password }} | jq --arg project_id ${PROJECT_ID} --arg env_code ${ENV_CODE} -r '.data[]|select(.relationships.project.data.id==$project_id)|select(.attributes.code==$env_code)|select(.attributes.archived==false)' | wc -l)

        if [ ${ENVIRONMENT_EXISTS} -eq 0 ]; then
          echo "INFO: ... creating OpsChain Environment with Code [ ${ENV_CODE} ] for Project [ ${PROJECT_NAME} ] with Code [ ${PROJECT_CODE} ]"
          # Setup OpsChain Environment
          opschain environment create --project-code ${PROJECT_CODE} \
                                      --name "${{ inputs.opschain_environment }}" \
                                      --code "${ENV_CODE}" \
                                      --description "OpsChain Environment: ${{ inputs.opschain_environment }}" \
                                      --confirm
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to add OpsChain Environment [ ${ENV_CODE} ] to Project [ ${PROJECT_CODE} ]. Aborting."
            exit 1
          fi
        else
          echo "INFO: ... OpsChain Environment with Code [ ${ENV_CODE} ] already exists. No action."
        fi

    - name: OpsChain-Change-Create
      shell: bash
      env:
        opschain_apiBaseUrl: ${{ inputs.opschain_apiBaseUrl }}
        opschain_username: ${{ inputs.opschain_username }}
        opschain_password: ${{ inputs.opschain_password }}
        opschain_requestTimeout: ${{ inputs.opschain_requestTimeout }}
      run: |-
        OPSCHAIN_METADATA=""
        if [ -z "${{inputs.opschain_action_metadata}}" ]; then
          echo "INFO: No additional Action Metadata found."
        else
          echo "INFO: Additional Action Metadata found."
          OPSCHAIN_METADATA=", ${{inputs.opschain_action_metadata}}"
          echo "INFO: OPSCHAIN_METADATA: ${OPSCHAIN_METADATA}"
        fi
        cat<<EOF > ./metadata.json
        {
          "github_workflow": "${GITHUB_WORKFLOW}",
          "github_sha": "${GITHUB_SHA}",
          "github_repository": "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}",
          "github_actor": "${GITHUB_ACTOR}",
          "github_run_id": "${GITHUB_RUN_ID}",
          "workflow_run_url": "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          ${OPSCHAIN_METADATA}
        }
        EOF
        cat ./metadata.json | jq -r '.'
        if [ $? -ne 0 ]; then
          echo "ERROR: Failed to generate a valid metadata.json. Aborting."
          exit 1
        fi

        PROJECT_CODE=${{ steps.bootstrap.outputs.project_code }}
        ENVIRONMENT_CODE=${{ inputs.opschain_environment }}
        ENVIRONMENT_CODE_NO_HYPHEN=${ENVIRONMENT_CODE//-/}
        ENVIRONMENT_CODE_DOWNCASE=$(echo ${ENVIRONMENT_CODE_NO_HYPHEN} | tr '[:upper:]' '[:lower:]')
        ENV_CODE=${ENVIRONMENT_CODE_DOWNCASE}

        echo "OpsChain Info: $(DEBUG=axios opschain info -o yaml)"
        opschain change create --project-code ${PROJECT_CODE} \
                               --environment-code ${ENV_CODE} \
                               --git-remote-name ${{ inputs.opschain_git_remote }} \
                               --git-rev ${{inputs.opschain_git_rev}} \
                               --action ${{inputs.opschain_action}} \
                               --metadata-path ./metadata.json \
                               --confirm -f -o yaml
        exit $?
